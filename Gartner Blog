	In total, I thoroughly enjoyed reading this article. This article built on top of the discussion regarding microservices that we talked about in class and served to further define use cases of microservices, with detailing the core objectives of this architecture. I appreciated how this article not only extolled the virtues of microservice architecture, but also cautioned the disruptions that can come with applying this new paradigm, and suggests various alternatives that are less disruptive that organizations can use.
	Using the Gartner definition, a microservice describes an application component that can be scaled and deployed independently, in which it has no dependencies on the other components in the application, and performs one small task. An application that is entirely composed of these components is implementing a microservice architecture. According to this analysis, the core objectives of the microservice architecture are to allow for precise scalability, flexibility with deployment, and increased agility in terms of development. Since each of these components are independent of each other, portions of the application can be scaled up, while other portions of the application can be scaled down, depending on the business need. In a similar vein, the independence of these various components can allow them to be deployed in a variety of settings, which allows a company more flexibility in their deployment decision. On top of this, the small and independent nature of each individual microservice allows an individual microservice to be updated quickly, without fear of impacting other components, which works to further enhance agility and speed of development and feature changes.
	There are many reasons why microservices may be attractive to enterprise customers. For instance, the small and narrowed focus of an individual microservice works to reduce risks for companies, as the speedy nature of development of these services can allow a bug fix to be quickly deployed. Another positive of microservice architecture is that it is especially apt to Continuous Delivery (CD) development, so the time from feature conception to feature deployment is as limited as possible. On top of this, another advantage of microservices is that it facilitates resiliency within applications, as some design patterns can facilitate self-healing applications, in which applications can continue operating and recover rapidly when outages occur. Another positive feature of microservice architecture is that it provides operators with the ability to scale intelligently, as specific components causing slow speed and bottlenecks could be scaled up, instead of the entire application. This could allow some companies to significantly reduce their energy costs. Another positive aspect of MSA is that it facilitates distributed development, as teams working on one component do not need to know the details of another component, which allows teams to be more independent and works to speed up development. Also, MSA allows a team to utilize a variety of different technologies in an application, as each component could be built using the best technology for its specific task, which allows a wide range of flexibility in the technologies that can be used. 
	However, despite these positive aspects of microservices, microservices are not a panacea for an organization’s development issues and implementing MSA can cause disruptions and steep costs for an organization that does not have the prerequisites for success with this architecture . On a broader level, leaders and managers must be prepared to manage these changes, as a switch to MSA is made. For example, in order for MSA to be implemented correctly, an organization must be proficient in Agile and DevOps practices along with strong application design skills. Acquiring these skills come at a high cost to organizations and if an organization's attempts to use MSA without having these skills, their efforts will most likely fail. Also, MSA inherently requires new and complex application infrastructure, which can come at high cost and disruption to an organization that does not currently have this capability. In a similar vein, MSA changes how data is managed and an organization must be willing and able to adopt data management strategies that focus on distributed and denormalized data and eventual consistency. Also, teams that implement this architecture must not only be autonomous, but teams and the organization also need to develop a “product mindset” that permeates all aspects of the organization. Ultimately, MSA should only be adopted by an organization if they are able to meet these prerequisites and their current architecture is impeding scalability and agility requirements. 
	Due to these hefty requirements and costs required to implement them, there are a variety of alternatives that can increase an organization’s agility, while not providing the scalability benefits of MSA. For example, organizations can increase their agility and their ability to rapidly develop and deploy applications through the use of low-code methods, such as low-code application platforms, business process management suites, and business rules energy. However, these low-code methods often have significant limits in terms of their scalability. The most popular alternative to MSA are miniservices, which function as a compromise between monolithic systems and microservices. In miniservices, an application can be implemented by a few independently deployable miniservices, with each miniservice corresponding to a specific domain within the application. Thus, while miniservices still offer agility and scalable benefits, they do not offer them to the same degree as microservices. However, miniservices could be an optimal solution for teams that do not have a business need or the capability to withstand the high costs associated with switching to a microservice architecture. 
	This report works to summarize the impact that microservice architecture can have on development teams. While it can work to make development much more agile and scalable, it also requires a team to be highly skilled at many different tasks, such as DevOps and be willing to adopt new technologies, such as new data management strategies. If a team is unable to fully commit to microservices or their business needs do not require the agility or scalability requirements, they could use a variety of alternatives, such as low-code platforms and miniservices. While microservices can be of great benefits to organizations, organizations should carefully consider whether microservices are the right choice for them. 
